"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = exports.addonGenerator = void 0;
const yeoman_environment_1 = __importDefault(require("yeoman-environment"));
const loader_generator_1 = __importDefault(require("./loader-generator"));
const plugin_generator_1 = __importDefault(require("./plugin-generator"));
const addon_generator_1 = __importDefault(require("./addon-generator"));
exports.addonGenerator = addon_generator_1.default;
const init_generator_1 = __importDefault(require("./init-generator"));
exports.initGenerator = init_generator_1.default;
class GeneratorsCommand {
    async apply(cli) {
        const { logger } = cli;
        await cli.makeCommand({
            name: 'loader [output-path]',
            alias: 'l',
            description: 'Scaffold a loader.',
            usage: 'loader [output-path]',
            pkg: '@webpack-cli/generators',
        }, [], async (outputPath) => {
            const env = yeoman_environment_1.default.createEnv([], { cwd: outputPath });
            const generatorName = 'webpack-loader-generator';
            env.registerStub(loader_generator_1.default, generatorName);
            env.run(generatorName, () => {
                logger.success('Loader template has been successfully scaffolded.');
            });
        });
        cli.makeCommand({
            name: 'plugin [output-path]',
            alias: 'p',
            description: 'Scaffold a plugin.',
            usage: 'plugin [output-path]',
            pkg: '@webpack-cli/generators',
        }, [], async (outputPath) => {
            const env = yeoman_environment_1.default.createEnv([], { cwd: outputPath });
            const generatorName = 'webpack-plugin-generator';
            env.registerStub(plugin_generator_1.default, generatorName);
            env.run(generatorName, () => {
                logger.success('Plugin template has been successfully scaffolded.');
            });
        });
    }
}
exports.default = GeneratorsCommand;
__exportStar(require("./utils/ast-utils"), exports);
__exportStar(require("./utils/copy-utils"), exports);
__exportStar(require("./utils/modify-config-helper"), exports);
__exportStar(require("./utils/npm-packages-exists"), exports);
__exportStar(require("./utils/recursive-parser"), exports);
__exportStar(require("./utils/resolve-packages"), exports);
__exportStar(require("./utils/run-prettier"), exports);
__exportStar(require("./utils/scaffold"), exports);
__exportStar(require("./utils/validate-identifier"), exports);
__exportStar(require("./utils/prop-types"), exports);
__exportStar(require("./utils/global-packages-path"), exports);
